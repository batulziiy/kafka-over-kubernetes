  kind: StatefulSet
  apiVersion: apps/v1
  metadata:
    name: kafka-broker
    namespace: datastreaming
  spec:
    replicas: 3
    selector:
      matchLabels:
        app: kafka-broker
    serviceName: kafka-headless
    template:
      metadata:
        labels:
          app: kafka-broker
      spec:
        containers:
        - name: kafka-container
          image: bitnami/kafka:3.2.0
          imagePullPolicy: IfNotPresent
          command: ["/bin/bash", "-c"]
          args:
            - export KAFKA_CFG_BROKER_ID=${MY_POD_NAME##*-};
              exec /entrypoint.sh /run.sh;
          ports:
          - containerPort: 9092
          env:
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: MY_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: clusterDomain
            value: cluster.local
          - name: KAFKA_CFG_LISTENERS
            value: "INTERNAL://:9093,CLIENT://:9092"
          - name: KAFKA_ADVERTISED_LISTENERS
            value: INTERNAL://$(MY_POD_IP):9093,CLIENT://$(MY_POD_IP):9092
          - name: KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP
            value: "INTERNAL:plaintext,CLIENT:plaintext"
          - name: KAFKA_INTER_BROKER_LISTENER_NAME
            value: INTERNAL
          - name: KAFKA_CFG_ZOOKEEPER_CONNECT
            value: zookeeper-service:2181
          - name : ALLOW_PLAINTEXT_LISTENER
            value : "yes"
          - name : KAFKA_ZOOKEEPER_PROTOCOL
            value : PLAINTEXT
          - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
            value: "true"
          - name: KAFKA_CFG_LOG_DIRS
            value: "bitnami/kafka/data/log-$(MY_POD_NAME)"
          - name: KAFKA_LOG_CLEANUP_POLICY
            value: "compact"
          volumeMounts:
          - mountPath: /bitnami/kafka
            name: kafka-data
        volumes:
        - name: kafka-data
          persistentVolumeClaim:
            claimName: datastream-pvc
